{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst httpOption = {\n  headers: new HttpHeaders({\n    'content-type': 'application/json',\n    'auth-token': String(localStorage.getItem('token')) // 'auth-token':\n    //   'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MWEwNTY5ZWI1OGM5YWNmOTA4YmVlNzciLCJpYXQiOjE2Mzk0NzQ5MDB9.cIdU9dp_yDBufGfug05nTAmFaEgr1qmUjPZy_LIYZaQ',\n\n  })\n};\nexport let AdminService = /*#__PURE__*/(() => {\n  class AdminService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.loginApi = 'https://feedback-project-api.herokuapp.com/login';\n      this.floorApi = 'https://feedback-project-api.herokuapp.com/api/v1/floors';\n      this.departmentApi = 'https://feedback-project-api.herokuapp.com/api/v1/departments';\n      this.roomApi = '//feedback-project-api.herokuapp.com/api/v1/rooms';\n      this.messageApiUrl = 'https://feedback-project-api.herokuapp.com/api/v1/feedbacks';\n      this.allMessageApiUrl = 'https://feedback-project-api.herokuapp.com/api/v1/feedbacks/?isApproved=false&isRejected=false';\n      this.highMessageApiUrl = 'https://feedback-project-api.herokuapp.com/api/v1/feedbacks/?isApproved=false&isRejected=false&feedbackLevel=High';\n      this.NormalMessageApiUrl = 'https://feedback-project-api.herokuapp.com/api/v1/feedbacks/?isApproved=false&isRejected=false&feedbackLevel=Medium';\n      this.inProcessMessageApiUrl = 'https://feedback-project-api.herokuapp.com/api/v1/feedbacks/?isApproved=true&isCompleted=false';\n      this.approvedMessageApiUrl = 'https://feedback-project-api.herokuapp.com/api/v1/approveds';\n      this.incompletedMessageApiUrl = 'https://feedback-project-api.herokuapp.com/api/v1/feedbacks/?isApproved=true&isCompleted=true';\n      this.completedMessageApiUrl = 'https://feedback-project-api.herokuapp.com/api/v1/completeds';\n    }\n\n    getMessageById(id) {\n      return this.http.get(`${this.messageApiUrl}/${id}`, httpOption);\n    }\n\n    getCompletedMessage() {\n      return this.http.get(this.incompletedMessageApiUrl, httpOption);\n    }\n\n    completeMessage(data) {\n      return this.http.post(this.completedMessageApiUrl, data, httpOption);\n    }\n\n    approvedMessage(data) {\n      return this.http.post(this.approvedMessageApiUrl, data, httpOption);\n    }\n\n    getInProccessMessage() {\n      return this.http.get(this.inProcessMessageApiUrl, httpOption);\n    }\n\n    getAllMessage() {\n      return this.http.get(this.allMessageApiUrl, httpOption);\n    }\n\n    getHighMessage() {\n      return this.http.get(this.highMessageApiUrl, httpOption);\n    }\n\n    getNormalMessage() {\n      return this.http.get(this.NormalMessageApiUrl, httpOption);\n    }\n\n    login(email, password) {\n      return this.http.post(this.loginApi, {\n        email,\n        password\n      });\n    }\n\n    logout() {\n      localStorage.removeItem('token');\n      this.router.navigate(['/']);\n    }\n\n    loggedIn() {\n      return !!localStorage.getItem('token');\n    }\n\n    getfloor() {\n      return this.http.get(this.floorApi);\n    }\n\n    createFloor(data) {\n      return this.http.post(this.floorApi, data, httpOption);\n    }\n\n    deleteFloor(id) {\n      return this.http.delete(`${this.floorApi}/${id}`, httpOption);\n    }\n\n    getDepartment() {\n      return this.http.get(this.departmentApi);\n    }\n\n    createDepartment(data) {\n      return this.http.post(this.departmentApi, data, httpOption);\n    }\n\n    deleteDepartment(id) {\n      return this.http.delete(`${this.departmentApi}/${id}`, httpOption);\n    }\n\n    getRoom() {\n      return this.http.get(this.roomApi);\n    }\n\n    createRoom(data) {\n      return this.http.post(this.roomApi, data, httpOption);\n    }\n\n    deleteRoom(id) {\n      return this.http.delete(`${this.roomApi}/${id}`, httpOption);\n    }\n\n    deleteMessage(id) {\n      return this.http.delete(`${this.messageApiUrl}/${id}`, httpOption);\n    }\n\n  }\n\n  AdminService.ɵfac = function AdminService_Factory(t) {\n    return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AdminService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminService,\n    factory: AdminService.ɵfac,\n    providedIn: 'root'\n  });\n  return AdminService;\n})();","map":null,"metadata":{},"sourceType":"module"}